name: Daily Build and Release llama.cpp for Android (Qualcomm Adreno OpenCL with SSL)

on:
  schedule:
    # CRON 语法：每天 UTC 时间 20:00 (北京时间次日凌晨 4:00)
    - cron: '0 20 * * *'
  workflow_dispatch: # 保留手动触发选项

jobs:
  build_and_release_daily:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许创建/更新 Release

    steps:
    - name: Install build dependencies
      run: |
        sudo apt-get update
        # 需要 perl (OpenSSL 配置脚本需要), make, build-essential 等基础编译工具
        sudo apt-get install -y ninja-build cmake git wget unzip ca-certificates zip pkg-config perl make build-essential

    - name: Create and Run Build Script
      # 更新：脚本现在包含编译 OpenSSL, libcurl (with SSL), 和 llama.cpp 的步骤
      # 更新：修正了 OpenSSL 配置的环境变量设置
      run: |
        cat << 'EOF' > $HOME/build_android_opencl.sh
        #!/bin/bash
        set -e # 如果任何命令失败则退出

        # --- 配置 ---
        NDK_VERSION="26.3.11579264"
        NDK_BASE_PATH="$HOME/android-sdk"
        export ANDROID_NDK_HOME="$NDK_BASE_PATH/ndk/$NDK_VERSION" # OpenSSL 配置需要这个变量名
        export NDK_PATH="$ANDROID_NDK_HOME" # 保持 NDK_PATH 也可用

        ANDROID_ABI="arm64-v8a"
        ANDROID_API_LEVEL="28" # 选择一个统一的 API Level
        LLAMA_CPP_ANDROID_PLATFORM="android-${ANDROID_API_LEVEL}"
        LIBCURL_ANDROID_PLATFORM="${ANDROID_API_LEVEL}"
        OPENSSL_ARCH="android-arm64" # aarch64 -> android-arm64 for OpenSSL Configure

        DEV_DIR="$HOME/dev/llm"
        DEPS_INSTALL_DIR="$DEV_DIR/deps-install-android" # OpenSSL 和 libcurl 都将安装到这里

        # --- 环境检查 ---
        # (此处省略之前的环境检查: wget, unzip, git, cmake, ninja)

        # --- 步骤 1: 安装 Android NDK ---
        echo ">>> 步骤 1: 安装 Android NDK ${NDK_VERSION}..."
        if [ ! -d "$NDK_PATH" ]; then
            mkdir -p "$NDK_BASE_PATH/cmdline-tools"
            cd "$HOME" || exit 1
            wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip && \
            unzip commandlinetools-linux-8512546_latest.zip && \
            mv cmdline-tools latest && \
            mv latest "$NDK_BASE_PATH/cmdline-tools/" && \
            rm -rf commandlinetools-linux-8512546_latest.zip
            SDKMANAGER="$NDK_BASE_PATH/cmdline-tools/latest/bin/sdkmanager"
            if [ ! -f "$SDKMANAGER" ]; then echo "错误：未找到 sdkmanager at $SDKMANAGER"; exit 1; fi
            echo "y" | "$SDKMANAGER" --sdk_root="$NDK_BASE_PATH" "ndk;${NDK_VERSION}" || { echo "NDK 安装失败"; exit 1; }
        fi
        if [ ! -d "$NDK_PATH/build/cmake" ]; then echo "错误：NDK 安装后未找到预期的目录"; exit 1; fi
        echo "NDK 路径设置为: $NDK_PATH"


        # --- 步骤 2: 准备 OpenCL 文件 ---
        echo ">>> 步骤 2: 准备 OpenCL 文件..."
        mkdir -p "$DEV_DIR"
        cd "$DEV_DIR" || exit 1
        OPENCL_HEADERS_TARGET_DIR="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include"
        if [ ! -d "$OPENCL_HEADERS_TARGET_DIR/CL" ]; then
            git clone https://github.com/KhronosGroup/OpenCL-Headers.git OpenCL-Headers-tmp && \
            cp -r OpenCL-Headers-tmp/CL "$OPENCL_HEADERS_TARGET_DIR/" && \
            rm -rf OpenCL-Headers-tmp
            echo "OpenCL 头文件已复制。"
        else
            echo "OpenCL 头文件似乎已存在，跳过。"
        fi
        OPENCL_LIB_TARGET_DIR="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android"
        OPENCL_LIB_TARGET_FILE="$OPENCL_LIB_TARGET_DIR/libOpenCL.so"
        if [ ! -f "$OPENCL_LIB_TARGET_FILE" ]; then
            git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git
            cd OpenCL-ICD-Loader || exit 1
            mkdir build_ndk_ocl && cd build_ndk_ocl || exit 1
            cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE="$NDK_PATH/build/cmake/android.toolchain.cmake" \
              -DOPENCL_ICD_LOADER_HEADERS_DIR="$OPENCL_HEADERS_TARGET_DIR" \
              -DANDROID_ABI="$ANDROID_ABI" \
              -DANDROID_PLATFORM="24" \
              -DANDROID_STL=c++_shared
            ninja || { echo "OpenCL ICD Loader 编译失败"; exit 1; }
            mkdir -p "$OPENCL_LIB_TARGET_DIR"
            cp libOpenCL.so "$OPENCL_LIB_TARGET_FILE" || { echo "复制 libOpenCL.so 失败"; exit 1; }
            echo "OpenCL ICD Loader (libOpenCL.so) 已编译并复制。"
            cd "$DEV_DIR" || exit 1
        else
            echo "libOpenCL.so 似乎已存在，跳过 ICD Loader 编译。"
        fi


        # --- 新增步骤: 交叉编译 OpenSSL for Android ---
        echo ">>> 新增步骤: 交叉编译 OpenSSL for Android..."
        mkdir -p "$DEPS_INSTALL_DIR" # 确保安装目录存在
        cd "$DEV_DIR" || exit 1
        if [ ! -d "openssl" ]; then
            git clone --depth 1 --branch openssl-3.0.13 https://github.com/openssl/openssl.git
        fi
        cd openssl || exit 1

        # --- 设置 OpenSSL 交叉编译环境变量 ---
        echo ">>> 设置 OpenSSL 交叉编译环境变量..."
        export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export TARGET=aarch64-linux-android # Target triplet
        # ANDROID_API_LEVEL is already set above
        # ANDROID_NDK_HOME is already set above

        # 设置编译器、链接器、归档器等工具路径
        export AR=$TOOLCHAIN/bin/llvm-ar
        export AS=$TOOLCHAIN/bin/llvm-as
        export CC=$TOOLCHAIN/bin/${TARGET}${ANDROID_API_LEVEL}-clang
        export CXX=$TOOLCHAIN/bin/${TARGET}${ANDROID_API_LEVEL}-clang++
        export LD=$TOOLCHAIN/bin/ld
        export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN/bin/llvm-strip

        echo ">>> 配置 OpenSSL for ${OPENSSL_ARCH} API ${ANDROID_API_LEVEL}..."
        # ./Configure 会使用上面设置的 CC, AR 等环境变量
        ./Configure ${OPENSSL_ARCH} \
            -D__ANDROID_API__=${ANDROID_API_LEVEL} \
            no-shared \
            no-tests \
            --prefix=${DEPS_INSTALL_DIR} \
            --openssldir=${DEPS_INSTALL_DIR}/ssl

        echo ">>> 开始编译 OpenSSL for Android..."
        make -j$(nproc) || { echo "OpenSSL 编译失败"; exit 1; }
        echo ">>> 开始安装 OpenSSL for Android 到 $DEPS_INSTALL_DIR ..."
        make install_sw || { echo "OpenSSL 安装失败"; exit 1; }
        echo ">>> OpenSSL for Android 编译安装完成。"
        cd "$DEV_DIR" || exit 1 # 返回开发目录


        # --- 修改步骤: 交叉编译 libcurl for Android (with OpenSSL) ---
        echo ">>> 修改步骤: 交叉编译 libcurl for Android (with OpenSSL)..."
        cd "$DEV_DIR" || exit 1
        if [ ! -d "curl" ]; then
            git clone --depth 1 --branch curl-8_8_0 https://github.com/curl/curl.git
        fi
        cd curl || exit 1
        if [ -d "build-android" ]; then rm -rf build-android; fi # 清理旧目录
        mkdir -p build-android && cd build-android || exit 1
        # 配置 CMake for libcurl (交叉编译, 使用自编译的 OpenSSL)
        cmake .. -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="$NDK_PATH/build/cmake/android.toolchain.cmake" \
          -DANDROID_ABI="$ANDROID_ABI" \
          -DANDROID_PLATFORM="$LIBCURL_ANDROID_PLATFORM" \
          -DCMAKE_INSTALL_PREFIX="$DEPS_INSTALL_DIR" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCURL_DISABLE_LDAP=ON \
          -DCURL_DISABLE_LDAPS=ON \
          -DBUILD_CURL_EXE=OFF \
          -DBUILD_TESTING=OFF \
          -DENABLE_MANUAL=OFF \
          -DCURL_USE_OPENSSL=ON \
          -DOPENSSL_ROOT_DIR="$DEPS_INSTALL_DIR" \
          -DOPENSSL_USE_STATIC_LIBS=ON \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--unresolved-symbols=ignore-in-shared-libs"

        echo ">>> 开始编译 libcurl (with OpenSSL) for Android..."
        ninja || { echo "libcurl 编译失败"; exit 1; }
        echo ">>> 开始安装 libcurl (with OpenSSL) for Android 到 $DEPS_INSTALL_DIR ..."
        ninja install || { echo "libcurl 安装失败"; exit 1; }
        echo ">>> libcurl (with OpenSSL) for Android 编译安装完成。"
        cd "$DEV_DIR" || exit 1


        # --- 步骤 4: (调整后) 编译 llama.cpp ---
        echo ">>> 步骤 4: 克隆最新 llama.cpp 并编译 (链接自编译的 libcurl+OpenSSL)..."
        if [ -d "llama.cpp" ]; then rm -rf llama.cpp; fi
        git clone https://github.com/ggerganov/llama.cpp.git
        cd llama.cpp || exit 1
        LATEST_COMMIT_HASH=$(git rev-parse --short HEAD)
        echo "LATEST_COMMIT_HASH=${LATEST_COMMIT_HASH}" >> $GITHUB_ENV

        echo ">>> 清理旧的构建目录..."
        if [ -d "build-android" ]; then rm -rf build-android; fi
        mkdir -p build-android && cd build-android || exit 1

        echo ">>> 配置 CMake for llama.cpp (使用自编译的依赖)..."
        # CMAKE_PREFIX_PATH 会帮助找到 curl 和 openssl
        cmake .. -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="$NDK_PATH/build/cmake/android.toolchain.cmake" \
          -DANDROID_ABI="$ANDROID_ABI" \
          -DANDROID_PLATFORM="$LLAMA_CPP_ANDROID_PLATFORM" \
          -DBUILD_SHARED_LIBS=OFF \
          -DGGML_OPENCL=ON \
          -DCMAKE_PREFIX_PATH="$DEPS_INSTALL_DIR" # <--- 告诉 CMake 在这里找依赖

        echo ">>> 开始编译 llama.cpp..."
        ninja || { echo "llama.cpp 编译失败"; exit 1; }

        echo ">>> llama.cpp 编译成功!"
        echo "可执行文件位于：$(pwd)/bin"
        echo "LLAMA_BIN_PATH=$(pwd)/bin" >> $GITHUB_ENV

        exit 0
        EOF

        chmod +x $HOME/build_android_opencl.sh
        echo "运行编译脚本..."
        $HOME/build_android_opencl.sh

    - name: Package Binaries
      run: |
        TODAY=$(date +%Y-%m-%d)
        echo "TODAY_DATE=${TODAY}" >> $GITHUB_ENV
        ARTIFACT_NAME="llama-android-opencl-ssl-${TODAY}" # 文件名中加入 ssl 标识
        echo "准备打包目录: ${{ env.LLAMA_BIN_PATH }}"
        cd "${{ env.LLAMA_BIN_PATH }}" || exit 1
        zip -r "${ARTIFACT_NAME}.zip" ./*
        echo "打包完成: ${ARTIFACT_NAME}.zip"
        echo "ARTIFACT_ZIP_PATH=${PWD}/${ARTIFACT_NAME}.zip" >> $GITHUB_ENV
        echo "ARTIFACT_ZIP_NAME=${ARTIFACT_NAME}.zip" >> $GITHUB_ENV

    - name: Create or Update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: daily-android-opencl-adreno-ssl # 标签名也加入 ssl 标识
        name: "Daily llama.cpp Build for Android (Qualcomm Adreno OpenCL + SSL) - ${{ env.TODAY_DATE }}"
        body: |
          **Requires Android device with compatible Qualcomm Adreno GPU and OpenCL support (e.g., Snapdragon 8 Gen 1/2/3/Elite).**

          Automatic daily build triggered on ${{ env.TODAY_DATE }}.
          Compiled from llama.cpp commit: `${{ env.LATEST_COMMIT_HASH }}`
          Binaries are for Android arm64-v8a with Adreno OpenCL backend enabled (`-DGGML_OPENCL=ON`). **Includes statically linked libcurl with OpenSSL 3.0.13 support.**
        files: ${{ env.ARTIFACT_ZIP_PATH }}
        fail_on_unmatched_files: true
        prerelease: true
