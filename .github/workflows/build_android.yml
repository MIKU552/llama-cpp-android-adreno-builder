name: Daily Build and Release llama.cpp for Android (Qualcomm Adreno OpenCL + CURL + OpenSSL)

on:
  schedule:
    - cron: '0 20 * * *'  # 每天 UTC 20:00，北京时间次日 04:00
  workflow_dispatch:

jobs:
  build_and_release_daily:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build cmake git wget unzip ca-certificates zip perl

    - name: Create and Run Build Script (with OpenSSL & CURL)
      run: |
        cat << 'EOF' > $HOME/build_android_opencl_curl.sh
        #!/bin/bash
        set -e

        # --- 配置 ---
        NDK_VERSION="26.3.11579264"
        ANDROID_ABI="arm64-v8a"
        ANDROID_API_LEVEL="28"
        LLAMA_CPP_ANDROID_PLATFORM="android-${ANDROID_API_LEVEL}"
        ICD_LOADER_ANDROID_PLATFORM="24"
        DEV_DIR="$HOME/dev/llm"
        export ANDROID_NDK_HOME="$HOME/android-sdk/ndk/$NDK_VERSION"
        export NDK_PATH="$ANDROID_NDK_HOME"

        # 安装 NDK（如不存在）
        if [ ! -d "$NDK_PATH" ]; then
          mkdir -p "$HOME/android-sdk/cmdline-tools"
          wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
          unzip commandlinetools-linux-8512546_latest.zip
          mv cmdline-tools "$HOME/android-sdk/cmdline-tools/latest"
          yes | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$HOME/android-sdk" "ndk;$NDK_VERSION"
        fi

        # 准备 OpenCL 头和 ICD Loader
        mkdir -p "$DEV_DIR" && cd "$DEV_DIR"
        OPENCL_HEADERS="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/CL"
        if [ ! -d "$OPENCL_HEADERS" ]; then
          git clone https://github.com/KhronosGroup/OpenCL-Headers.git tmp && \
          cp -r tmp/CL "$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/" && rm -rf tmp
        fi
        OPENCL_LIB_DIR="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android"
        if [ ! -f "$OPENCL_LIB_DIR/libOpenCL.so" ]; then
          git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git && cd OpenCL-ICD-Loader
          mkdir build && cd build
          cmake .. -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$NDK_PATH/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI="$ANDROID_ABI" \
            -DANDROID_PLATFORM="$ICD_LOADER_ANDROID_PLATFORM" \
            -DOPENCL_ICD_LOADER_HEADERS_DIR="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include" \
            -DANDROID_STL=c++_shared
          ninja && cp libOpenCL.so "$OPENCL_LIB_DIR/"
          cd "$DEV_DIR"
        fi

        # --- 交叉编译 OpenSSL for Android ---
        echo '>>> 步骤: 交叉编译 OpenSSL...'
        git clone https://github.com/openssl/openssl.git openssl-src && cd openssl-src
        TOOLCHAIN="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64"
        export PATH="$TOOLCHAIN/bin:$PATH"
        export ANDROID_API="$ANDROID_API_LEVEL"
        # 为 OpenSSL Configure 提供 gcc 名称映射
        if [ ! -f "$TOOLCHAIN/bin/aarch64-linux-android-gcc" ]; then
          ln -s "$TOOLCHAIN/bin/aarch64-linux-android${ANDROID_API_LEVEL}-clang" "$TOOLCHAIN/bin/aarch64-linux-android-gcc"
        fi
        ./Configure android-arm64 no-shared no-unit-test \
          --prefix=$DEV_DIR/openssl-android \
          --openssldir=$DEV_DIR/openssl-android
        make -j$(nproc) && make install_sw
        cd "$DEV_DIR"

        # --- 交叉编译 libcurl for Android with OpenSSL ---
        echo '>>> 步骤: 交叉编译 libcurl...'
        git clone https://github.com/curl/curl.git curl-src && cd curl-src
        mkdir build-android && cd build-android
        cmake .. -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="$NDK_PATH/build/cmake/android.toolchain.cmake" \
          -DANDROID_ABI="$ANDROID_ABI" \
          -DANDROID_PLATFORM="$LLAMA_CPP_ANDROID_PLATFORM" \
          -DBUILD_SHARED_LIBS=OFF \
          -DCURL_STATICLIB=ON \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DCMAKE_USE_OPENSSL=ON \
          -DOPENSSL_ROOT_DIR="$DEV_DIR/openssl-android" \
          -DOPENSSL_CRYPTO_LIBRARY="$DEV_DIR/openssl-android/lib/libcrypto.a" \
          -DOPENSSL_SSL_LIBRARY="$DEV_DIR/openssl-android/lib/libssl.a"
        ninja
        CURL_LIB="$(pwd)/lib/libcurl.a"
        CURL_INC="$DEV_DIR/openssl-android/include"
        cd "$DEV_DIR"

        # --- 编译 llama.cpp (启用 CURL + OpenCL) ---
        echo '>>> 步骤: 克隆并编译 llama.cpp...'
        rm -rf llama.cpp && git clone https://github.com/ggerganov/llama.cpp.git
        cd llama.cpp && mkdir build-android && cd build-android
        cmake .. -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="$NDK_PATH/build/cmake/android.toolchain.cmake" \
          -DANDROID_ABI="$ANDROID_ABI" \
          -DANDROID_PLATFORM="$LLAMA_CPP_ANDROID_PLATFORM" \
          -DGGML_OPENCL=ON \
          -DLLAMA_CURL=ON \
          -DCURL_LIBRARY="$CURL_LIB" \
          -DCURL_INCLUDE_DIR="$CURL_INC" \
          -DBUILD_SHARED_LIBS=OFF
        ninja
        echo "LLAMA_BIN_PATH=$(pwd)/bin" >> $GITHUB_ENV
        EOF

        chmod +x $HOME/build_android_opencl_curl.sh
        $HOME/build_android_opencl_curl.sh

    - name: Package Binaries
      run: |
        TODAY=$(date +%F)
        echo "TODAY_DATE=$TODAY" >> $GITHUB_ENV
        ARTIFACT_NAME="llama-android-opencl-curl-openssl-${TODAY}"
        cd "${{ env.LLAMA_BIN_PATH }}" && zip -r "${ARTIFACT_NAME}.zip" ./*
        echo "ARTIFACT_ZIP_PATH=$(pwd)/${ARTIFACT_NAME}.zip" >> $GITHUB_ENV

    - name: Create or Update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: daily-android-opencl-adreno-curl-openssl
        name: "Daily llama.cpp Build for Android (Adreno OpenCL + CURL + OpenSSL) - ${{ env.TODAY_DATE }}"
        body: |
          **Requires Android device with Qualcomm Adreno GPU and OpenCL support.**

          自动构建触发于 ${{ env.TODAY_DATE }}。
          llama.cpp commit: `${{ env.LATEST_COMMIT_HASH }}`
          **CURL & OpenSSL support enabled** (`-DLLAMA_CURL=ON`, HTTPS 支持）。
        files: ${{ env.ARTIFACT_ZIP_PATH }}
        fail_on_unmatched_files: true
        prerelease: true
